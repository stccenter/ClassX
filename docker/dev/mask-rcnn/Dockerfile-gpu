# Use official CUDA image from NVIDIA as base
FROM nvidia/cuda:12.2.0-runtime-ubuntu22.04

# Set environment variables for Python, CUDA, and NVIDIA
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8

# Install system packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    wget \
    curl \
    ca-certificates \
    libgl1-mesa-glx \
    libglib2.0-0 \
    && rm -rf /var/lib/apt/lists/*

# Copy conda environment to container
COPY ./environment/maskrcnn-env.yml /tmp/maskrcnn-env.yml

# Install Miniconda
RUN mkdir -p /opt/miniconda3
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /opt/miniconda3/miniconda.sh
RUN bash /opt/miniconda3/miniconda.sh -b -u -p /opt/miniconda3

# Remove installer
RUN rm /opt/miniconda3/miniconda.sh

# Update conda PATH
ENV PATH="/opt/miniconda3/bin:$PATH"

# Create conda environment
RUN conda env create -f /tmp/maskrcnn-env.yml -n maskrcnn
RUN conda clean -a

# Activate environment and install pip dependencies
RUN /bin/bash -c "source activate maskrcnn"

# Ensure conda environment is activated when container starts
RUN echo "conda activate maskrcnn" >> ~/.bashrc

# Set working directory
WORKDIR /maskrcnn

# Copy dummy flask app test for GPU
COPY ./docker/dev/mask-rcnn/test-gpu.py /maskrcnn/test-gpu.py

# Entrypoint using conda environment
ENTRYPOINT ["conda", "run", "--no-capture-output", "-n", "maskrcnn"]

